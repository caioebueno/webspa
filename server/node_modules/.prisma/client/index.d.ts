
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';

export import DMMF = runtime.DMMF

/**
 * Prisma Errors
 */
export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
export import PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export import sql = runtime.sqltag
export import empty = runtime.empty
export import join = runtime.join
export import raw = runtime.raw
export import Sql = runtime.Sql

/**
 * Decimal.js
 */
export import Decimal = runtime.Decimal

/**
 * Prisma Client JS version: 2.14.0
 * Query Engine version: 5d491261d382a2a5ffdc71de17072b0e409f1cc1
 */
export type PrismaVersion = {
  client: string
}

export const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export type InputJsonObject = {[Key in string]?: JsonValue}
 
export interface InputJsonArray extends Array<JsonValue> {}
 
export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
 type SelectAndInclude = {
  select: any
  include: any
}
type HasSelect = {
  select: any
}
type HasInclude = {
  include: any
}
type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Buffer
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

export type Union = any

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

/**
A [[Boolean]]
*/
export type Boolean = True | False

// /**
// 1
// */
export type True = 1

/**
0
*/
export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never



/**
 * Used by group by
 */

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
> = IsObject<T> extends True ? U : T

type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but with an array
 */
type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>





/**
 * Model Dev
 */

export type Dev = {
  id: number
  name: string
  email: string
  Age: number
  linkedin: string
  csharp: boolean
  javascript: boolean
  node: boolean
  angular: boolean
  react: boolean
  ionic: boolean
  mensageria: boolean
  php: boolean
  lavarel: boolean
}

/**
 * Model Recruiter
 */

export type Recruiter = {
  id: number
  email: string
  password: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Devs
 * const devs = await prisma.dev.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Devs
   * const devs = await prisma.dev.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<T>;

  /**
   * Execute queries in a transaction
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   */
  $transaction: PromiseConstructor['all']

      /**
   * `prisma.dev`: Exposes CRUD operations for the **Dev** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Devs
    * const devs = await prisma.dev.findMany()
    * ```
    */
  get dev(): Prisma.DevDelegate;

  /**
   * `prisma.recruiter`: Exposes CRUD operations for the **Recruiter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recruiters
    * const recruiters = await prisma.recruiter.findMany()
    * ```
    */
  get recruiter(): Prisma.RecruiterDelegate;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.14.0
   * Query Engine version: 5d491261d382a2a5ffdc71de17072b0e409f1cc1
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Dev: 'Dev',
    Recruiter: 'Recruiter'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model Dev
   */


  export type AggregateDev = {
    count: number | null
    avg: DevAvgAggregateOutputType | null
    sum: DevSumAggregateOutputType | null
    min: DevMinAggregateOutputType | null
    max: DevMaxAggregateOutputType | null
  }

  export type DevAvgAggregateOutputType = {
    id: number
    Age: number
  }

  export type DevSumAggregateOutputType = {
    id: number
    Age: number
  }

  export type DevMinAggregateOutputType = {
    id: number
    name: string | null
    email: string | null
    Age: number
    linkedin: string | null
    csharp: boolean | null
    javascript: boolean | null
    node: boolean | null
    angular: boolean | null
    react: boolean | null
    ionic: boolean | null
    mensageria: boolean | null
    php: boolean | null
    lavarel: boolean | null
  }

  export type DevMaxAggregateOutputType = {
    id: number
    name: string | null
    email: string | null
    Age: number
    linkedin: string | null
    csharp: boolean | null
    javascript: boolean | null
    node: boolean | null
    angular: boolean | null
    react: boolean | null
    ionic: boolean | null
    mensageria: boolean | null
    php: boolean | null
    lavarel: boolean | null
  }

  export type DevCountAggregateOutputType = {
    id: number
    name: number | null
    email: number | null
    Age: number
    linkedin: number | null
    csharp: number | null
    javascript: number | null
    node: number | null
    angular: number | null
    react: number | null
    ionic: number | null
    mensageria: number | null
    php: number | null
    lavarel: number | null
    _all: number
  }


  export type DevAvgAggregateInputType = {
    id?: true
    Age?: true
  }

  export type DevSumAggregateInputType = {
    id?: true
    Age?: true
  }

  export type DevMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    Age?: true
    linkedin?: true
    csharp?: true
    javascript?: true
    node?: true
    angular?: true
    react?: true
    ionic?: true
    mensageria?: true
    php?: true
    lavarel?: true
  }

  export type DevMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    Age?: true
    linkedin?: true
    csharp?: true
    javascript?: true
    node?: true
    angular?: true
    react?: true
    ionic?: true
    mensageria?: true
    php?: true
    lavarel?: true
  }

  export type DevCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    Age?: true
    linkedin?: true
    csharp?: true
    javascript?: true
    node?: true
    angular?: true
    react?: true
    ionic?: true
    mensageria?: true
    php?: true
    lavarel?: true
    _all?: true
  }

  export type AggregateDevArgs = {
    /**
     * Filter which Dev to aggregate.
    **/
    where?: DevWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Devs to fetch.
    **/
    orderBy?: Enumerable<DevOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: DevWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devs from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devs.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Devs
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: DevAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: DevSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: DevMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: DevMaxAggregateInputType
  }

  export type GetDevAggregateType<T extends AggregateDevArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetDevAggregateScalarType<T[P]>
  }

  export type GetDevAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof DevAvgAggregateOutputType ? DevAvgAggregateOutputType[P] : never
  }

    



  export type DevSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    Age?: boolean
    linkedin?: boolean
    csharp?: boolean
    javascript?: boolean
    node?: boolean
    angular?: boolean
    react?: boolean
    ionic?: boolean
    mensageria?: boolean
    php?: boolean
    lavarel?: boolean
  }

  export type DevGetPayload<
    S extends boolean | null | undefined | DevArgs,
    U = keyof S
      > = S extends true
        ? Dev
    : S extends undefined
    ? never
    : S extends DevArgs | FindManyDevArgs
    ?'include' extends U
    ? Dev 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Dev ?Dev [P]
  : 
     never
  } 
    : Dev
  : Dev


  export interface DevDelegate {
    /**
     * Find zero or one Dev that matches the filter.
     * @param {FindUniqueDevArgs} args - Arguments to find a Dev
     * @example
     * // Get one Dev
     * const dev = await prisma.dev.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueDevArgs>(
      args: Subset<T, FindUniqueDevArgs>
    ): CheckSelect<T, Prisma__DevClient<Dev | null>, Prisma__DevClient<DevGetPayload<T> | null>>

    /**
     * Find the first Dev that matches the filter.
     * @param {FindFirstDevArgs} args - Arguments to find a Dev
     * @example
     * // Get one Dev
     * const dev = await prisma.dev.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstDevArgs>(
      args?: Subset<T, FindFirstDevArgs>
    ): CheckSelect<T, Prisma__DevClient<Dev | null>, Prisma__DevClient<DevGetPayload<T> | null>>

    /**
     * Find zero or more Devs that matches the filter.
     * @param {FindManyDevArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Devs
     * const devs = await prisma.dev.findMany()
     * 
     * // Get first 10 Devs
     * const devs = await prisma.dev.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const devWithIdOnly = await prisma.dev.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyDevArgs>(
      args?: Subset<T, FindManyDevArgs>
    ): CheckSelect<T, Promise<Array<Dev>>, Promise<Array<DevGetPayload<T>>>>

    /**
     * Create a Dev.
     * @param {DevCreateArgs} args - Arguments to create a Dev.
     * @example
     * // Create one Dev
     * const Dev = await prisma.dev.create({
     *   data: {
     *     // ... data to create a Dev
     *   }
     * })
     * 
    **/
    create<T extends DevCreateArgs>(
      args: Subset<T, DevCreateArgs>
    ): CheckSelect<T, Prisma__DevClient<Dev>, Prisma__DevClient<DevGetPayload<T>>>

    /**
     * Delete a Dev.
     * @param {DevDeleteArgs} args - Arguments to delete one Dev.
     * @example
     * // Delete one Dev
     * const Dev = await prisma.dev.delete({
     *   where: {
     *     // ... filter to delete one Dev
     *   }
     * })
     * 
    **/
    delete<T extends DevDeleteArgs>(
      args: Subset<T, DevDeleteArgs>
    ): CheckSelect<T, Prisma__DevClient<Dev>, Prisma__DevClient<DevGetPayload<T>>>

    /**
     * Update one Dev.
     * @param {DevUpdateArgs} args - Arguments to update one Dev.
     * @example
     * // Update one Dev
     * const dev = await prisma.dev.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DevUpdateArgs>(
      args: Subset<T, DevUpdateArgs>
    ): CheckSelect<T, Prisma__DevClient<Dev>, Prisma__DevClient<DevGetPayload<T>>>

    /**
     * Delete zero or more Devs.
     * @param {DevDeleteManyArgs} args - Arguments to filter Devs to delete.
     * @example
     * // Delete a few Devs
     * const { count } = await prisma.dev.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DevDeleteManyArgs>(
      args?: Subset<T, DevDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Devs.
     * @param {DevUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Devs
     * const dev = await prisma.dev.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DevUpdateManyArgs>(
      args: Subset<T, DevUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Dev.
     * @param {DevUpsertArgs} args - Arguments to update or create a Dev.
     * @example
     * // Update or create a Dev
     * const dev = await prisma.dev.upsert({
     *   create: {
     *     // ... data to create a Dev
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dev we want to update
     *   }
     * })
    **/
    upsert<T extends DevUpsertArgs>(
      args: Subset<T, DevUpsertArgs>
    ): CheckSelect<T, Prisma__DevClient<Dev>, Prisma__DevClient<DevGetPayload<T>>>

    /**
     * Find zero or one Dev that matches the filter.
     * @param {FindUniqueDevArgs} args - Arguments to find a Dev
     * @deprecated This will be deprecated please use prisma.dev.findUnique
     * @example
     * // Get one Dev
     * const dev = await prisma.dev.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueDevArgs>(
      args: Subset<T, FindUniqueDevArgs>
    ): CheckSelect<T, Prisma__DevClient<Dev | null>, Prisma__DevClient<DevGetPayload<T> | null>>

    /**
     * Count the number of Devs.
     * @param {FindManyDevArgs} args - Arguments to filter Devs to count.
     * @example
     * // Count the number of Devs
     * const count = await prisma.dev.count({
     *   where: {
     *     // ... the filter for the Devs we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyDevArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Dev.
     * @param {AggregateDevArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateDevArgs>(args: Subset<T, AggregateDevArgs>): Promise<GetDevAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Dev.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DevClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Dev findUnique
   */
  export type FindUniqueDevArgs = {
    /**
     * Select specific fields to fetch from the Dev
    **/
    select?: DevSelect | null
    /**
     * Filter, which Dev to fetch.
    **/
    where: DevWhereUniqueInput
  }


  /**
   * Dev findFirst
   */
  export type FindFirstDevArgs = {
    /**
     * Select specific fields to fetch from the Dev
    **/
    select?: DevSelect | null
    /**
     * Filter, which Dev to fetch.
    **/
    where?: DevWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Devs to fetch.
    **/
    orderBy?: Enumerable<DevOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Devs.
    **/
    cursor?: DevWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devs from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devs.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Devs.
    **/
    distinct?: Enumerable<DevScalarFieldEnum>
  }


  /**
   * Dev findMany
   */
  export type FindManyDevArgs = {
    /**
     * Select specific fields to fetch from the Dev
    **/
    select?: DevSelect | null
    /**
     * Filter, which Devs to fetch.
    **/
    where?: DevWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Devs to fetch.
    **/
    orderBy?: Enumerable<DevOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Devs.
    **/
    cursor?: DevWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Devs from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Devs.
    **/
    skip?: number
    distinct?: Enumerable<DevScalarFieldEnum>
  }


  /**
   * Dev create
   */
  export type DevCreateArgs = {
    /**
     * Select specific fields to fetch from the Dev
    **/
    select?: DevSelect | null
    /**
     * The data needed to create a Dev.
    **/
    data: DevCreateInput
  }


  /**
   * Dev update
   */
  export type DevUpdateArgs = {
    /**
     * Select specific fields to fetch from the Dev
    **/
    select?: DevSelect | null
    /**
     * The data needed to update a Dev.
    **/
    data: DevUpdateInput
    /**
     * Choose, which Dev to update.
    **/
    where: DevWhereUniqueInput
  }


  /**
   * Dev updateMany
   */
  export type DevUpdateManyArgs = {
    data: DevUpdateManyMutationInput
    where?: DevWhereInput
  }


  /**
   * Dev upsert
   */
  export type DevUpsertArgs = {
    /**
     * Select specific fields to fetch from the Dev
    **/
    select?: DevSelect | null
    /**
     * The filter to search for the Dev to update in case it exists.
    **/
    where: DevWhereUniqueInput
    /**
     * In case the Dev found by the `where` argument doesn't exist, create a new Dev with this data.
    **/
    create: DevCreateInput
    /**
     * In case the Dev was found with the provided `where` argument, update it with this data.
    **/
    update: DevUpdateInput
  }


  /**
   * Dev delete
   */
  export type DevDeleteArgs = {
    /**
     * Select specific fields to fetch from the Dev
    **/
    select?: DevSelect | null
    /**
     * Filter which Dev to delete.
    **/
    where: DevWhereUniqueInput
  }


  /**
   * Dev deleteMany
   */
  export type DevDeleteManyArgs = {
    where?: DevWhereInput
  }


  /**
   * Dev without action
   */
  export type DevArgs = {
    /**
     * Select specific fields to fetch from the Dev
    **/
    select?: DevSelect | null
  }



  /**
   * Model Recruiter
   */


  export type AggregateRecruiter = {
    count: number | null
    avg: RecruiterAvgAggregateOutputType | null
    sum: RecruiterSumAggregateOutputType | null
    min: RecruiterMinAggregateOutputType | null
    max: RecruiterMaxAggregateOutputType | null
  }

  export type RecruiterAvgAggregateOutputType = {
    id: number
  }

  export type RecruiterSumAggregateOutputType = {
    id: number
  }

  export type RecruiterMinAggregateOutputType = {
    id: number
    email: string | null
    password: string | null
  }

  export type RecruiterMaxAggregateOutputType = {
    id: number
    email: string | null
    password: string | null
  }

  export type RecruiterCountAggregateOutputType = {
    id: number
    email: number | null
    password: number | null
    _all: number
  }


  export type RecruiterAvgAggregateInputType = {
    id?: true
  }

  export type RecruiterSumAggregateInputType = {
    id?: true
  }

  export type RecruiterMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
  }

  export type RecruiterMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
  }

  export type RecruiterCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    _all?: true
  }

  export type AggregateRecruiterArgs = {
    /**
     * Filter which Recruiter to aggregate.
    **/
    where?: RecruiterWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Recruiters to fetch.
    **/
    orderBy?: Enumerable<RecruiterOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: RecruiterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recruiters from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recruiters.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recruiters
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: RecruiterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: RecruiterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: RecruiterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: RecruiterMaxAggregateInputType
  }

  export type GetRecruiterAggregateType<T extends AggregateRecruiterArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetRecruiterAggregateScalarType<T[P]>
  }

  export type GetRecruiterAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof RecruiterAvgAggregateOutputType ? RecruiterAvgAggregateOutputType[P] : never
  }

    



  export type RecruiterSelect = {
    id?: boolean
    email?: boolean
    password?: boolean
  }

  export type RecruiterGetPayload<
    S extends boolean | null | undefined | RecruiterArgs,
    U = keyof S
      > = S extends true
        ? Recruiter
    : S extends undefined
    ? never
    : S extends RecruiterArgs | FindManyRecruiterArgs
    ?'include' extends U
    ? Recruiter 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Recruiter ?Recruiter [P]
  : 
     never
  } 
    : Recruiter
  : Recruiter


  export interface RecruiterDelegate {
    /**
     * Find zero or one Recruiter that matches the filter.
     * @param {FindUniqueRecruiterArgs} args - Arguments to find a Recruiter
     * @example
     * // Get one Recruiter
     * const recruiter = await prisma.recruiter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueRecruiterArgs>(
      args: Subset<T, FindUniqueRecruiterArgs>
    ): CheckSelect<T, Prisma__RecruiterClient<Recruiter | null>, Prisma__RecruiterClient<RecruiterGetPayload<T> | null>>

    /**
     * Find the first Recruiter that matches the filter.
     * @param {FindFirstRecruiterArgs} args - Arguments to find a Recruiter
     * @example
     * // Get one Recruiter
     * const recruiter = await prisma.recruiter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstRecruiterArgs>(
      args?: Subset<T, FindFirstRecruiterArgs>
    ): CheckSelect<T, Prisma__RecruiterClient<Recruiter | null>, Prisma__RecruiterClient<RecruiterGetPayload<T> | null>>

    /**
     * Find zero or more Recruiters that matches the filter.
     * @param {FindManyRecruiterArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recruiters
     * const recruiters = await prisma.recruiter.findMany()
     * 
     * // Get first 10 Recruiters
     * const recruiters = await prisma.recruiter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recruiterWithIdOnly = await prisma.recruiter.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyRecruiterArgs>(
      args?: Subset<T, FindManyRecruiterArgs>
    ): CheckSelect<T, Promise<Array<Recruiter>>, Promise<Array<RecruiterGetPayload<T>>>>

    /**
     * Create a Recruiter.
     * @param {RecruiterCreateArgs} args - Arguments to create a Recruiter.
     * @example
     * // Create one Recruiter
     * const Recruiter = await prisma.recruiter.create({
     *   data: {
     *     // ... data to create a Recruiter
     *   }
     * })
     * 
    **/
    create<T extends RecruiterCreateArgs>(
      args: Subset<T, RecruiterCreateArgs>
    ): CheckSelect<T, Prisma__RecruiterClient<Recruiter>, Prisma__RecruiterClient<RecruiterGetPayload<T>>>

    /**
     * Delete a Recruiter.
     * @param {RecruiterDeleteArgs} args - Arguments to delete one Recruiter.
     * @example
     * // Delete one Recruiter
     * const Recruiter = await prisma.recruiter.delete({
     *   where: {
     *     // ... filter to delete one Recruiter
     *   }
     * })
     * 
    **/
    delete<T extends RecruiterDeleteArgs>(
      args: Subset<T, RecruiterDeleteArgs>
    ): CheckSelect<T, Prisma__RecruiterClient<Recruiter>, Prisma__RecruiterClient<RecruiterGetPayload<T>>>

    /**
     * Update one Recruiter.
     * @param {RecruiterUpdateArgs} args - Arguments to update one Recruiter.
     * @example
     * // Update one Recruiter
     * const recruiter = await prisma.recruiter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RecruiterUpdateArgs>(
      args: Subset<T, RecruiterUpdateArgs>
    ): CheckSelect<T, Prisma__RecruiterClient<Recruiter>, Prisma__RecruiterClient<RecruiterGetPayload<T>>>

    /**
     * Delete zero or more Recruiters.
     * @param {RecruiterDeleteManyArgs} args - Arguments to filter Recruiters to delete.
     * @example
     * // Delete a few Recruiters
     * const { count } = await prisma.recruiter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RecruiterDeleteManyArgs>(
      args?: Subset<T, RecruiterDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Recruiters.
     * @param {RecruiterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recruiters
     * const recruiter = await prisma.recruiter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RecruiterUpdateManyArgs>(
      args: Subset<T, RecruiterUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Recruiter.
     * @param {RecruiterUpsertArgs} args - Arguments to update or create a Recruiter.
     * @example
     * // Update or create a Recruiter
     * const recruiter = await prisma.recruiter.upsert({
     *   create: {
     *     // ... data to create a Recruiter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recruiter we want to update
     *   }
     * })
    **/
    upsert<T extends RecruiterUpsertArgs>(
      args: Subset<T, RecruiterUpsertArgs>
    ): CheckSelect<T, Prisma__RecruiterClient<Recruiter>, Prisma__RecruiterClient<RecruiterGetPayload<T>>>

    /**
     * Find zero or one Recruiter that matches the filter.
     * @param {FindUniqueRecruiterArgs} args - Arguments to find a Recruiter
     * @deprecated This will be deprecated please use prisma.recruiter.findUnique
     * @example
     * // Get one Recruiter
     * const recruiter = await prisma.recruiter.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueRecruiterArgs>(
      args: Subset<T, FindUniqueRecruiterArgs>
    ): CheckSelect<T, Prisma__RecruiterClient<Recruiter | null>, Prisma__RecruiterClient<RecruiterGetPayload<T> | null>>

    /**
     * Count the number of Recruiters.
     * @param {FindManyRecruiterArgs} args - Arguments to filter Recruiters to count.
     * @example
     * // Count the number of Recruiters
     * const count = await prisma.recruiter.count({
     *   where: {
     *     // ... the filter for the Recruiters we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyRecruiterArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Recruiter.
     * @param {AggregateRecruiterArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateRecruiterArgs>(args: Subset<T, AggregateRecruiterArgs>): Promise<GetRecruiterAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Recruiter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RecruiterClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Recruiter findUnique
   */
  export type FindUniqueRecruiterArgs = {
    /**
     * Select specific fields to fetch from the Recruiter
    **/
    select?: RecruiterSelect | null
    /**
     * Filter, which Recruiter to fetch.
    **/
    where: RecruiterWhereUniqueInput
  }


  /**
   * Recruiter findFirst
   */
  export type FindFirstRecruiterArgs = {
    /**
     * Select specific fields to fetch from the Recruiter
    **/
    select?: RecruiterSelect | null
    /**
     * Filter, which Recruiter to fetch.
    **/
    where?: RecruiterWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Recruiters to fetch.
    **/
    orderBy?: Enumerable<RecruiterOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recruiters.
    **/
    cursor?: RecruiterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recruiters from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recruiters.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Recruiters.
    **/
    distinct?: Enumerable<RecruiterScalarFieldEnum>
  }


  /**
   * Recruiter findMany
   */
  export type FindManyRecruiterArgs = {
    /**
     * Select specific fields to fetch from the Recruiter
    **/
    select?: RecruiterSelect | null
    /**
     * Filter, which Recruiters to fetch.
    **/
    where?: RecruiterWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Recruiters to fetch.
    **/
    orderBy?: Enumerable<RecruiterOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recruiters.
    **/
    cursor?: RecruiterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recruiters from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recruiters.
    **/
    skip?: number
    distinct?: Enumerable<RecruiterScalarFieldEnum>
  }


  /**
   * Recruiter create
   */
  export type RecruiterCreateArgs = {
    /**
     * Select specific fields to fetch from the Recruiter
    **/
    select?: RecruiterSelect | null
    /**
     * The data needed to create a Recruiter.
    **/
    data: RecruiterCreateInput
  }


  /**
   * Recruiter update
   */
  export type RecruiterUpdateArgs = {
    /**
     * Select specific fields to fetch from the Recruiter
    **/
    select?: RecruiterSelect | null
    /**
     * The data needed to update a Recruiter.
    **/
    data: RecruiterUpdateInput
    /**
     * Choose, which Recruiter to update.
    **/
    where: RecruiterWhereUniqueInput
  }


  /**
   * Recruiter updateMany
   */
  export type RecruiterUpdateManyArgs = {
    data: RecruiterUpdateManyMutationInput
    where?: RecruiterWhereInput
  }


  /**
   * Recruiter upsert
   */
  export type RecruiterUpsertArgs = {
    /**
     * Select specific fields to fetch from the Recruiter
    **/
    select?: RecruiterSelect | null
    /**
     * The filter to search for the Recruiter to update in case it exists.
    **/
    where: RecruiterWhereUniqueInput
    /**
     * In case the Recruiter found by the `where` argument doesn't exist, create a new Recruiter with this data.
    **/
    create: RecruiterCreateInput
    /**
     * In case the Recruiter was found with the provided `where` argument, update it with this data.
    **/
    update: RecruiterUpdateInput
  }


  /**
   * Recruiter delete
   */
  export type RecruiterDeleteArgs = {
    /**
     * Select specific fields to fetch from the Recruiter
    **/
    select?: RecruiterSelect | null
    /**
     * Filter which Recruiter to delete.
    **/
    where: RecruiterWhereUniqueInput
  }


  /**
   * Recruiter deleteMany
   */
  export type RecruiterDeleteManyArgs = {
    where?: RecruiterWhereInput
  }


  /**
   * Recruiter without action
   */
  export type RecruiterArgs = {
    /**
     * Select specific fields to fetch from the Recruiter
    **/
    select?: RecruiterSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const DevScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    Age: 'Age',
    linkedin: 'linkedin',
    csharp: 'csharp',
    javascript: 'javascript',
    node: 'node',
    angular: 'angular',
    react: 'react',
    ionic: 'ionic',
    mensageria: 'mensageria',
    php: 'php',
    lavarel: 'lavarel'
  };

  export type DevScalarFieldEnum = (typeof DevScalarFieldEnum)[keyof typeof DevScalarFieldEnum]


  export const RecruiterScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password'
  };

  export type RecruiterScalarFieldEnum = (typeof RecruiterScalarFieldEnum)[keyof typeof RecruiterScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type DevWhereInput = {
    AND?: Enumerable<DevWhereInput>
    OR?: Enumerable<DevWhereInput>
    NOT?: Enumerable<DevWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    email?: StringFilter | string
    Age?: IntFilter | number
    linkedin?: StringFilter | string
    csharp?: BoolFilter | boolean
    javascript?: BoolFilter | boolean
    node?: BoolFilter | boolean
    angular?: BoolFilter | boolean
    react?: BoolFilter | boolean
    ionic?: BoolFilter | boolean
    mensageria?: BoolFilter | boolean
    php?: BoolFilter | boolean
    lavarel?: BoolFilter | boolean
  }

  export type DevOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    Age?: SortOrder
    linkedin?: SortOrder
    csharp?: SortOrder
    javascript?: SortOrder
    node?: SortOrder
    angular?: SortOrder
    react?: SortOrder
    ionic?: SortOrder
    mensageria?: SortOrder
    php?: SortOrder
    lavarel?: SortOrder
  }

  export type DevWhereUniqueInput = {
    id?: number
  }

  export type RecruiterWhereInput = {
    AND?: Enumerable<RecruiterWhereInput>
    OR?: Enumerable<RecruiterWhereInput>
    NOT?: Enumerable<RecruiterWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    password?: StringFilter | string
  }

  export type RecruiterOrderByInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type RecruiterWhereUniqueInput = {
    id?: number
  }

  export type DevCreateInput = {
    name: string
    email: string
    Age: number
    linkedin: string
    csharp: boolean
    javascript: boolean
    node: boolean
    angular: boolean
    react: boolean
    ionic: boolean
    mensageria: boolean
    php: boolean
    lavarel: boolean
  }

  export type DevUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Age?: IntFieldUpdateOperationsInput | number
    linkedin?: StringFieldUpdateOperationsInput | string
    csharp?: BoolFieldUpdateOperationsInput | boolean
    javascript?: BoolFieldUpdateOperationsInput | boolean
    node?: BoolFieldUpdateOperationsInput | boolean
    angular?: BoolFieldUpdateOperationsInput | boolean
    react?: BoolFieldUpdateOperationsInput | boolean
    ionic?: BoolFieldUpdateOperationsInput | boolean
    mensageria?: BoolFieldUpdateOperationsInput | boolean
    php?: BoolFieldUpdateOperationsInput | boolean
    lavarel?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DevUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    Age?: IntFieldUpdateOperationsInput | number
    linkedin?: StringFieldUpdateOperationsInput | string
    csharp?: BoolFieldUpdateOperationsInput | boolean
    javascript?: BoolFieldUpdateOperationsInput | boolean
    node?: BoolFieldUpdateOperationsInput | boolean
    angular?: BoolFieldUpdateOperationsInput | boolean
    react?: BoolFieldUpdateOperationsInput | boolean
    ionic?: BoolFieldUpdateOperationsInput | boolean
    mensageria?: BoolFieldUpdateOperationsInput | boolean
    php?: BoolFieldUpdateOperationsInput | boolean
    lavarel?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RecruiterCreateInput = {
    email: string
    password: string
  }

  export type RecruiterUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type RecruiterUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}

/*
* Exports for compatibility introduced in 2.12.0
* Please import from the Prisma namespace instead
*/

/**
 * @deprecated Renamed to `Prisma.DevScalarFieldEnum`
 */
export type DevScalarFieldEnum = Prisma.DevScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.RecruiterScalarFieldEnum`
 */
export type RecruiterScalarFieldEnum = Prisma.RecruiterScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.SortOrder`
 */
export type SortOrder = Prisma.SortOrder

/**
 * @deprecated Renamed to `Prisma.ModelName`
 */
export type ModelName = Prisma.ModelName

/**
 * @deprecated Renamed to `Prisma.AggregateDev`
 */
export type AggregateDev = Prisma.AggregateDev

/**
 * @deprecated Renamed to `Prisma.DevAvgAggregateOutputType`
 */
export type DevAvgAggregateOutputType = Prisma.DevAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.DevSumAggregateOutputType`
 */
export type DevSumAggregateOutputType = Prisma.DevSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.DevMinAggregateOutputType`
 */
export type DevMinAggregateOutputType = Prisma.DevMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.DevMaxAggregateOutputType`
 */
export type DevMaxAggregateOutputType = Prisma.DevMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.DevCountAggregateOutputType`
 */
export type DevCountAggregateOutputType = Prisma.DevCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateDevArgs`
 */
export type AggregateDevArgs = Prisma.AggregateDevArgs

/**
 * @deprecated Renamed to `Prisma.DevAvgAggregateInputType`
 */
export type DevAvgAggregateInputType = Prisma.DevAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.DevSumAggregateInputType`
 */
export type DevSumAggregateInputType = Prisma.DevSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.DevMinAggregateInputType`
 */
export type DevMinAggregateInputType = Prisma.DevMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.DevMaxAggregateInputType`
 */
export type DevMaxAggregateInputType = Prisma.DevMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.DevCountAggregateInputType`
 */
export type DevCountAggregateInputType = Prisma.DevCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.DevSelect`
 */
export type DevSelect = Prisma.DevSelect

/**
 * @deprecated Renamed to `Prisma.FindUniqueDevArgs`
 */
export type FindUniqueDevArgs = Prisma.FindUniqueDevArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstDevArgs`
 */
export type FindFirstDevArgs = Prisma.FindFirstDevArgs

/**
 * @deprecated Renamed to `Prisma.FindManyDevArgs`
 */
export type FindManyDevArgs = Prisma.FindManyDevArgs

/**
 * @deprecated Renamed to `Prisma.DevCreateArgs`
 */
export type DevCreateArgs = Prisma.DevCreateArgs

/**
 * @deprecated Renamed to `Prisma.DevUpdateArgs`
 */
export type DevUpdateArgs = Prisma.DevUpdateArgs

/**
 * @deprecated Renamed to `Prisma.DevUpdateManyArgs`
 */
export type DevUpdateManyArgs = Prisma.DevUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.DevUpsertArgs`
 */
export type DevUpsertArgs = Prisma.DevUpsertArgs

/**
 * @deprecated Renamed to `Prisma.DevDeleteArgs`
 */
export type DevDeleteArgs = Prisma.DevDeleteArgs

/**
 * @deprecated Renamed to `Prisma.DevDeleteManyArgs`
 */
export type DevDeleteManyArgs = Prisma.DevDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateRecruiter`
 */
export type AggregateRecruiter = Prisma.AggregateRecruiter

/**
 * @deprecated Renamed to `Prisma.RecruiterAvgAggregateOutputType`
 */
export type RecruiterAvgAggregateOutputType = Prisma.RecruiterAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.RecruiterSumAggregateOutputType`
 */
export type RecruiterSumAggregateOutputType = Prisma.RecruiterSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.RecruiterMinAggregateOutputType`
 */
export type RecruiterMinAggregateOutputType = Prisma.RecruiterMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.RecruiterMaxAggregateOutputType`
 */
export type RecruiterMaxAggregateOutputType = Prisma.RecruiterMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.RecruiterCountAggregateOutputType`
 */
export type RecruiterCountAggregateOutputType = Prisma.RecruiterCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateRecruiterArgs`
 */
export type AggregateRecruiterArgs = Prisma.AggregateRecruiterArgs

/**
 * @deprecated Renamed to `Prisma.RecruiterAvgAggregateInputType`
 */
export type RecruiterAvgAggregateInputType = Prisma.RecruiterAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.RecruiterSumAggregateInputType`
 */
export type RecruiterSumAggregateInputType = Prisma.RecruiterSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.RecruiterMinAggregateInputType`
 */
export type RecruiterMinAggregateInputType = Prisma.RecruiterMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.RecruiterMaxAggregateInputType`
 */
export type RecruiterMaxAggregateInputType = Prisma.RecruiterMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.RecruiterCountAggregateInputType`
 */
export type RecruiterCountAggregateInputType = Prisma.RecruiterCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.RecruiterSelect`
 */
export type RecruiterSelect = Prisma.RecruiterSelect

/**
 * @deprecated Renamed to `Prisma.FindUniqueRecruiterArgs`
 */
export type FindUniqueRecruiterArgs = Prisma.FindUniqueRecruiterArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstRecruiterArgs`
 */
export type FindFirstRecruiterArgs = Prisma.FindFirstRecruiterArgs

/**
 * @deprecated Renamed to `Prisma.FindManyRecruiterArgs`
 */
export type FindManyRecruiterArgs = Prisma.FindManyRecruiterArgs

/**
 * @deprecated Renamed to `Prisma.RecruiterCreateArgs`
 */
export type RecruiterCreateArgs = Prisma.RecruiterCreateArgs

/**
 * @deprecated Renamed to `Prisma.RecruiterUpdateArgs`
 */
export type RecruiterUpdateArgs = Prisma.RecruiterUpdateArgs

/**
 * @deprecated Renamed to `Prisma.RecruiterUpdateManyArgs`
 */
export type RecruiterUpdateManyArgs = Prisma.RecruiterUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.RecruiterUpsertArgs`
 */
export type RecruiterUpsertArgs = Prisma.RecruiterUpsertArgs

/**
 * @deprecated Renamed to `Prisma.RecruiterDeleteArgs`
 */
export type RecruiterDeleteArgs = Prisma.RecruiterDeleteArgs

/**
 * @deprecated Renamed to `Prisma.RecruiterDeleteManyArgs`
 */
export type RecruiterDeleteManyArgs = Prisma.RecruiterDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.DevWhereInput`
 */
export type DevWhereInput = Prisma.DevWhereInput

/**
 * @deprecated Renamed to `Prisma.DevOrderByInput`
 */
export type DevOrderByInput = Prisma.DevOrderByInput

/**
 * @deprecated Renamed to `Prisma.DevWhereUniqueInput`
 */
export type DevWhereUniqueInput = Prisma.DevWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.RecruiterWhereInput`
 */
export type RecruiterWhereInput = Prisma.RecruiterWhereInput

/**
 * @deprecated Renamed to `Prisma.RecruiterOrderByInput`
 */
export type RecruiterOrderByInput = Prisma.RecruiterOrderByInput

/**
 * @deprecated Renamed to `Prisma.RecruiterWhereUniqueInput`
 */
export type RecruiterWhereUniqueInput = Prisma.RecruiterWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.DevCreateInput`
 */
export type DevCreateInput = Prisma.DevCreateInput

/**
 * @deprecated Renamed to `Prisma.DevUpdateInput`
 */
export type DevUpdateInput = Prisma.DevUpdateInput

/**
 * @deprecated Renamed to `Prisma.DevUpdateManyMutationInput`
 */
export type DevUpdateManyMutationInput = Prisma.DevUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.RecruiterCreateInput`
 */
export type RecruiterCreateInput = Prisma.RecruiterCreateInput

/**
 * @deprecated Renamed to `Prisma.RecruiterUpdateInput`
 */
export type RecruiterUpdateInput = Prisma.RecruiterUpdateInput

/**
 * @deprecated Renamed to `Prisma.RecruiterUpdateManyMutationInput`
 */
export type RecruiterUpdateManyMutationInput = Prisma.RecruiterUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.IntFilter`
 */
export type IntFilter = Prisma.IntFilter

/**
 * @deprecated Renamed to `Prisma.StringFilter`
 */
export type StringFilter = Prisma.StringFilter

/**
 * @deprecated Renamed to `Prisma.BoolFilter`
 */
export type BoolFilter = Prisma.BoolFilter

/**
 * @deprecated Renamed to `Prisma.StringFieldUpdateOperationsInput`
 */
export type StringFieldUpdateOperationsInput = Prisma.StringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.IntFieldUpdateOperationsInput`
 */
export type IntFieldUpdateOperationsInput = Prisma.IntFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.BoolFieldUpdateOperationsInput`
 */
export type BoolFieldUpdateOperationsInput = Prisma.BoolFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.NestedIntFilter`
 */
export type NestedIntFilter = Prisma.NestedIntFilter

/**
 * @deprecated Renamed to `Prisma.NestedStringFilter`
 */
export type NestedStringFilter = Prisma.NestedStringFilter

/**
 * @deprecated Renamed to `Prisma.NestedBoolFilter`
 */
export type NestedBoolFilter = Prisma.NestedBoolFilter